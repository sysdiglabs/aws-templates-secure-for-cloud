AWSTemplateFormatVersion: "2010-09-09"
Description: ECS Image Scanning with Sysdig Secure

Parameters:
  SysdigSecureEndpoint:
    Type: String
    Description: "Enter your Sysdig Secure Endpoint"
    Default: "https://app.sysdigcloud.com"
  SysdigSecureAPITokenSsm:
    Type: String
    Description: "Name of the parameter in SSM containing the Sysdig Secure API Token"

Resources:
  StartBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "IAM::Role which allows to run the CodeBuild Job to perform the ECS scanning"
      Path: /
      Policies:
        - PolicyName: BuildRunner
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                Resource:
                  - !GetAtt BuildProject.Arn
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "IAM::Role which allows to run the CodeBuild Job to perform the ECS scanning"
      Path: /
      Policies:
        - PolicyName: LogsPublisher
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:*:*:log-group:build"
                  - "arn:aws:logs:*:*:log-group:build:*"

        - PolicyName: CodeBuildPublisher
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:*:*:log-group:/aws/codebuild/${AWS::StackName}-BuildProject"
                  - !Sub "arn:aws:logs:*:*:log-group:/aws/codebuild/${AWS::StackName}-BuildProject:*"
              - Effect: Allow
                Action:
                  - "codebuild:CreateReportGroup"
                  - "codebuild:CreateReport"
                  - "codebuild:UpdateReport"
                  - "codebuild:BatchPutTestCases"
                Resource:
                  - !Sub "arn:aws:codebuild:*:*:report-group/${AWS::StackName}-BuildProject-*"

        - PolicyName: ParameterReader
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:DescribeParameters"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                Resource:
                  - !Sub "arn:aws:ssm:*:*:parameter/${SysdigSecureAPITokenSsm}"

        - PolicyName: TaskDefinitionReader
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:DescribeTaskDefinition"
                Resource:
                  - "*"

        - PolicyName: SecretsReader
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  TriggerScanEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Trigger Codebuild project for scanning on ECS event
      EventPattern:
        source:
          - "aws.ecs"
        detail-type:
          - "ECS Task State Change"
        detail:
          desiredStatus:
            - RUNNING
          lastStatus:
            - PROVISIONING
      State: ENABLED
      Targets:
        - Arn: !GetAtt BuildProject.Arn
          Id: codebuild-scan-task
          RoleArn: !GetAtt StartBuildRole.Arn
          InputTransformer:
            InputPathsMap:
              region: "$.region"
              taskDefinitionArn: "$.detail.taskDefinitionArn"
            InputTemplate: |
              {
                "environmentVariablesOverride": [
                  {"name": "EVENT_REGION", "value":<region>},
                  {"name": "EVENT_TASKDEFINITIONARN","value":<taskDefinitionArn>}
                ]
              }

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-BuildProject"
      Description: "CodeBuild project which scans images using inline technology in ECS using Sysdig Secure"
      ServiceRole: !Ref ServiceRole
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:3.0
        PrivilegedMode: true
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              SCAN_IMAGE_NAME: "quay.io/sysdig/secure-inline-scan:2"
              SYSDIG_SECURE_ENDPOINT: ${SysdigSecureEndpoint}
            parameter-store:
              SYSDIG_SECURE_TOKEN: ${SysdigSecureAPITokenSsm}
          phases:
            build:
              commands:
              - |
                  python - <<EOF
                  import boto3
                  import json
                  import os
                  import subprocess
                  import sys

                  def get_task_definition(task_definition_arn, region):
                      client = boto3.client('ecs', region_name=region)
                      return client.describe_task_definition(taskDefinition=task_definition_arn)

                  def get_credentials_secret_for(container):
                      if "repositoryCredentials" in container \
                          and "credentialsParameter" in container["repositoryCredentials"]:
                              return container["repositoryCredentials"]["credentialsParameter"]
                      return None

                  def launch_scan(image, user, password):
                      args = ["docker",
                          "run",
                          "--rm",
                          os.getenv("SCAN_IMAGE_NAME"),
                          "--sysdig-url={}".format(os.getenv("SYSDIG_SECURE_ENDPOINT")),
                          "--sysdig-token={}".format(os.getenv("SYSDIG_SECURE_TOKEN")),
                          image
                          ]

                      print("Running: {}".format(" ".join(args)))

                      if user:
                          print("Adding --registry-auth-basic=***:***")
                          args.append("--registry-auth-basic={}:{}".format(user,password))

                      ret = subprocess.run(args)
                      if ret.returncode != 0 and ret.returncode != 1:
                          print("Error executing inline-scan for image {}".format(image))

                  def get_credentials_from_secret_manager(secret_id, region):
                      client = boto3.client('secretsmanager', region_name=region)
                      get_secret_value_response = client.get_secret_value(SecretId=secret_id)
                      secret = json.loads(get_secret_value_response['SecretString'])
                      return secret["username"], secret["password"]

                  def main():
                      region = os.getenv("EVENT_REGION")
                      task_definition_arn = os.getenv("EVENT_TASKDEFINITIONARN")

                      if not task_definition_arn:
                          print("taskDefinitionArn not found. Is EVENT_TASKDEFINITIONARN defined?")
                          sys.exit(1)
                      if not region:
                          print("region not found. Is EVENT_REGION defined?")
                          sys.exit(1)
                      if not os.getenv("SCAN_IMAGE_NAME"):
                          print("SCAN_IMAGE_NAME is not defined")
                          sys.exit(1)

                      task_definition = get_task_definition(task_definition_arn, region)

                      for container in task_definition["taskDefinition"]["containerDefinitions"]:
                          image = container["image"]
                          print("Checking image {} for container {} in task {}".format(image, container["name"], task_definition_arn))
                          secret_id = get_credentials_secret_for(container)
                          if secret_id:
                              user, password = get_credentials_from_secret_manager(secret_id, region)
                          else:
                              user, password = "", ""

                          launch_scan(image, user, password)

                  if __name__ == "__main__":
                      main()
                  EOF
