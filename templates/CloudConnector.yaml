AWSTemplateFormatVersion: "2010-09-09"
Description: Cloud Connector for AWS

Parameters:
  LogRetention:
    Type: Number
    Default: 5
    Description: Days to keep logs from CloudConnector
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the workload is deployed
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets where the CloudConnector will be deployed
  ECSCluster:
    Type: String
    Description: ECS Fargate Cluster where deploy the CloudConnector workload
  SysdigSecureEndpointSsm:
    Type: AWS::SSM::Parameter::Name
    Description: "Name of the parameter in SSM containing the Sysdig Secure Endpoint URL"
  SysdigSecureAPITokenSsm:
    Type: AWS::SSM::Parameter::Name
    Description: "Name of the parameter in SSM containing the Sysdig Secure API Token"
  S3ConfigBucket:
    Type: String
    Description: Name of a bucket (must exist) where the configuration YAML files will be stored
  VerifySSL:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
  CloudBenchDeployed:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
  ECRDeployed:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
  ECSDeployed:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
  CloudTrailTopic:
    Type: String
    Description: ARN of the SNS Topic to subscribe

Conditions:
  VerifySSL: !Equals [!Ref VerifySSL, "Yes"]
  CloudBenchDeployed: !Equals [!Ref CloudBenchDeployed, "Yes"]
  ECRDeployed: !Equals [!Ref ECRDeployed, "Yes"]
  ECSDeployed: !Equals [!Ref ECSDeployed, "Yes"]

Resources:

  CloudTrailQueue:
    Type: AWS::SQS::Queue

  CloudTrailQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref CloudTrailQueue
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: Allow CloudTrail to send messages
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource: !GetAtt CloudTrailQueue.Arn

  Subscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt CloudTrailQueue.Arn
      TopicArn: !Ref CloudTrailTopic

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: !Ref LogRetention

  AlertsLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref LogGroup
      LogStreamName: alerts

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-TaskRolePolicy"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "s3:Get*"
                - "s3:List*"
                - "s3:Put*"
                - "s3:Head*"
                - "securityhub:GetFindings"
                - "securityhub:BatchImportFindings"
                - 'logs:DescribeLogStreams'
                - 'logs:GetLogEvents'
                - 'logs:FilterLogEvents'
                - 'logs:PutLogEvents'
                - 'sqs:DeleteMessage'
                - 'sqs:DeleteMessageBatch'
                - 'sqs:ReceiveMessage'
              Resource: '*'

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-ExecutionRolePolicy"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
        - PolicyName: !Sub "${AWS::StackName}-TaskReadParameters"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParameters"
              Resource:
                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SysdigSecureEndpointSsm}
                - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SysdigSecureAPITokenSsm}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      Family: !Sub "${AWS::StackName}-CloudConnector"
      NetworkMode: awsvpc
      TaskRoleArn: !Ref TaskRole
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      Cpu: "256"
      Memory: "512"
      ContainerDefinitions:
        - Name: Config
          Environment:
            - Name: BUCKET
              Value: !Ref S3ConfigBucket
            - Name: KEY
              Value: cloud-connector.yaml
            - Name: OUTPUT
              Value: /tmp/cloud-connector.yaml
            - Name: CONFIG
              Value:
                "Fn::Base64":
                    !Sub |
                      rules:
                        - secure:
                            url: ""
                        - s3:
                            bucket: ${S3ConfigBucket}
                            path: rules
                      ingestors:
                        - cloudtrail-sns-sqs:
                            queueURL: ${CloudTrailQueue}
                            interval: 25s
                      notifiers:
                        - cloudwatch:
                            logGroup: ${LogGroup}
                            logStream: ${AlertsLogStream}
                        - securityhub:
                            productArn: arn:aws:securityhub:${AWS::Region}::product/sysdig/sysdig-cloud-connector
                        - secure:
                            url: value overriden by SECURE_URL env var

          Image: sysdiglabs/cloud-connector-s3-bucket-config:master
          Essential: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
        - Name: CloudConnector
          Environment:
            - Name: VERIFY_SSL
              Value: !If [ VerifySSL, "true", "false" ]
            - Name: TELEMETRY_DEPLOYMENT_METHOD
              Value: cft
            - Name: TELEMETRY_CLOUDVISION_CLOUDBENCH_DEPLOYED
              Value: !If [ CloudBenchDeployed, "true", "false" ]
            - Name: TELEMETRY_CLOUDVISION_ECR_DEPLOYED
              Value: !If [ ECRDeployed, "true", "false" ]
            - Name: TELEMETRY_CLOUDVISION_ECS_DEPLOYED
              Value: !If [ ECSDeployed, "true", "false" ]
            - Name: CONFIG_PATH
              Value: !Sub s3://${S3ConfigBucket}/cloud-connector.yaml
          Secrets:
            - Name: SECURE_URL
              ValueFrom: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SysdigSecureEndpointSsm}
            - Name: SECURE_API_TOKEN
              ValueFrom: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SysdigSecureAPITokenSsm}
          DependsOn:
            - ContainerName: Config
              Condition: SUCCESS
          Image: sysdiglabs/cloud-connector:master
          Essential: true
          PortMappings:
            - ContainerPort: 5000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub "${AWS::StackName}-CloudConnector"
      GroupDescription: CloudConnector workload Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-CloudConnector"

  CloudConnectorService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${AWS::StackName}-CloudConnector"
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref Subnets
      TaskDefinition: !Ref TaskDefinition
