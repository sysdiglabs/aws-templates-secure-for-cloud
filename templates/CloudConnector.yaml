AWSTemplateFormatVersion: "2010-09-09"
Description: Cloud Connector for AWS

Parameters:
  CloudConnectorLogRetention:
    Type: Number
    Default: 5
    Description: Days to keep logs from CloudConnector
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the workload is deployed
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets where the CloudConnector will be deployed
  ECSCluster:
    Type: String
    Description: ECS Fargate Cluster where deploy the CloudConnector workload

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: !Ref CloudConnectorLogRetention

  AlertsLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref LogGroup
      LogStreamName: alerts

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-TaskRole"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-TaskRolePolicy"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "s3:Get*"
                - "s3:List*"
                - "s3:Put*"
                - "s3:Head*"
                - "securityhub:GetFindings"
                - "securityhub:BatchImportFindings"
                - 'logs:DescribeLogStreams'
                - 'logs:GetLogEvents'
                - 'logs:FilterLogEvents'
                - 'logs:PutLogEvents'
                - 'sqs:DeleteMessage'
                - 'sqs:DeleteMessageBatch'
                - 'sqs:ReceiveMessage'
              Resource: '*'

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ExecutionRole"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-ExecutionRolePolicy"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      Family: !Sub "${AWS::StackName}-CloudConnector"
      NetworkMode: awsvpc
      TaskRoleArn: !Ref TaskRole
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      Cpu: "256"
      Memory: "512"
      Volumes:
        - Name: config
          Host: {}
      ContainerDefinitions:
        - Name: Config
          Environment:
            - Name: BUCKET
              Value: !Ref Bucket
            - Name: KEY
              Value: cloud-connector.yaml
            - Name: OUTPUT
              Value: /etc/cloud-connector/cloud-connector.yaml
            - Name: CONFIG
              Value:
                "Fn::Base64":
                    !Sub |
                      rules:
                        - directory:
                            path: /rules
                        - s3:
                            bucket: ${Bucket}
                            path: rules
                      ingestors:
                        - cloudtrail-sns-sqs:
                            queueURL: ${CloudTrailStack.Outputs.Queue}
                            interval: 25s
                      notifiers:
                        - console: {}
                        - metrics: {}
                        - cloudwatch:
                            logGroup: ${LogGroup}
                            logStream: ${AlertsLogStream}
                        - securityhub:
                            productArn: arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:product/${AWS::AccountId}/default

          Image: sysdiglabs/cloud-connector-s3-bucket-config:master
          Essential: false
          MountPoints:
            - SourceVolume: config
              ContainerPath: "/etc/cloud-connector"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"
        - Name: CloudConnector
          DependsOn:
            - ContainerName: Config
              Condition: SUCCESS
          Image: sysdiglabs/cloud-connector:master
          Essential: true
          PortMappings:
            - ContainerPort: 5000
          MountPoints:
            - SourceVolume: config
              ContainerPath: "/etc/cloud-connector"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ecs"

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub "${AWS::StackName}-CloudConnector"
      GroupDescription: CloudConnector workload Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-CloudConnector"

  CloudConnectorService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${AWS::StackName}-CloudConnector"
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref Subnets
      TaskDefinition: !Ref TaskDefinition

  CloudTrailStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./CloudTrail.yaml
      Parameters:
        CloudTrailLogRetention: !Ref CloudConnectorLogRetention
